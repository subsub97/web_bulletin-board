package bbs;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;



public class BbsDAO {

	private Connection conn;
	private ResultSet rs;
	
	AlarmSubject alarmSubject = new AlarmSubjectImpl();
	
	public BbsDAO() {
		try {
			String dbURL = "jdbc:mysql://localhost:3306/BBS";
			String dbID = "root";
			String dbPassword = "1234";
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(dbURL,dbID,dbPassword);
			Statement statement = conn.createStatement();
			
			String query = "SELECT * FROM user WHERE alarmCondition = 1";
			rs = statement.executeQuery(query);
			System.out.println(rs));
			while (rs.next()) {
				String username = rs.getString("userID");
				System.out.println(username);
				AlarmObserver observer = new AlarmObserverImpl(username);
				alarmSubject.registerObserver(observer);
			}
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	
	public String getDate() {
 		String SQL = "SELECT NOW()"; //현재 시간을 가져오는 쿼리문
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			rs = pstmt.executeQuery();
 			if (rs.next()) {
 				return rs.getString(1); //테이블의 첫번째를 가져오는것 같음 
 			}
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return ""; // 데이터베이스 오류
	}
	
	public int getNext() {
 		String SQL = "SELECT bbsID FROM BBS ORDER BY bbsID DESC"; //내림차순하여 가장 마지막에 쓰인 글의 번호를 가져오기 위함
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			rs = pstmt.executeQuery();
 			if (rs.next()) {
 				return rs.getInt(1) + 1; //가져온 Int 결과의 1을 더한 값이 다음 글의 번호 
 			}
 			return 1; // 첫 게시글인 경우 
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return -1; // 데이터베이스 오류
	}
	
	// 글쓰기를 위한 함수 작성
	public int write(String bbsTitle, String userID, String bbsContent) {
	    String SQL = "INSERT INTO BBS VALUES (?, ?, ?, ?, ?, ?)";
	    try {
	        PreparedStatement pstmt = conn.prepareStatement(SQL);
	        
	        BbsProxy bbsProxy = BbsFactory.createBbs(bbsTitle, userID, bbsContent,getNext());
	        pstmt.setInt(1, bbsProxy.getBbsID());
	        pstmt.setString(2, bbsProxy.getBbsTitle());
	        pstmt.setString(3, bbsProxy.getUserID());
	        pstmt.setString(4, getDate());
	        pstmt.setString(5, bbsProxy.getBbsContent());
	        pstmt.setInt(6, bbsProxy.getBbsAvailable());

	        if(pstmt.executeUpdate() > 1)
	        	alarmSubject.notifyObservers("New alarm has been set");
	        return pstmt.executeUpdate();
	    }
	    catch (Exception e) {
	        e.printStackTrace();
	    }
	    return -1;
	}



	public ArrayList<Bbs> getList(int pageNumber){
 		String SQL = "SELECT * FROM bbs WHERE bbsID < ? AND bbsAvailable = 1 ORDER BY bbsID DESC LIMIT 10"; //bbsID가 특정 수보다 작은경우에 select하고 최대 10개까지 가져온다.
 		ArrayList<Bbs> list = new ArrayList<Bbs>();
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			pstmt.setInt(1, getNext() - (pageNumber - 1 * 10)); //getNext는 다음으로 작성될 글의 번호를 의미 
 			rs = pstmt.executeQuery();
 			while (rs.next()) {
 				Bbs bbs = new Bbs();
 				bbs.setBbsID(rs.getInt(1));
 				bbs.setBbsTitle(rs.getString(2));
 				bbs.setUserID(rs.getString(3));
 				bbs.setBbsDate(rs.getString(4));
 				bbs.setBbsContent(rs.getString(5));
 				bbs.setBbsAvailable(rs.getInt(6));
 				list.add(bbs);
 			}
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return list;
	}
	// 페이징 처리를 위한 함수
	public boolean nextPage(int pageNumber) {
 		String SQL = "SELECT * FROM bbs WHERE bbsID < ? AND bbsAvailable = 1"; 
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			pstmt.setInt(1, getNext() - (pageNumber - 1) * 10); //getNext는 다음으로 작성될 글의 번호를 의미 
 			rs = pstmt.executeQuery();
 			if (rs.next()) {
 				return true;

 			}
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return false;
	}
	
	public Bbs getBbs(int bbsID) {
 		String SQL = "SELECT * FROM bbs WHERE bbsID = ?"; 
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			pstmt.setInt(1, bbsID); 
 			rs = pstmt.executeQuery();
 			if (rs.next()) {
 				Bbs bbs = new Bbs();
 				bbs.setBbsID(rs.getInt(1));
 				bbs.setBbsTitle(rs.getString(2));
 				bbs.setUserID(rs.getString(3));
 				bbs.setBbsDate(rs.getString(4));
 				bbs.setBbsContent(rs.getString(5));
 				bbs.setBbsAvailable(rs.getInt(6));
 				return bbs;
 			}
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return null;
		
	}
	
	public int update(int bbsID,String bbsTitle, String bbsContent) {
 		String SQL = "UPDATE BBS SET bbsTitle = ? , bbsContent = ? WHERE bbsID = ?"; //특정한 아이디에 해당하는 제목과 내용을 바꾸기 위함
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			pstmt.setString(1, bbsTitle);
 			pstmt.setString(2,bbsContent);
 			pstmt.setInt(3,bbsID);
 			return pstmt.executeUpdate(); //성공한다면 0이상의 정수 값 반환
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return -1; // 데이터베이스 오류
		 
	}
	
	public int delete(int bbsID) {
		// 삭제한다고 하더라도 정보를 가지고 있고 싶기에 delete를 사용하지 않고 update를 사용하였다.		
 		String SQL = "UPDATE bbs SET bbsAvailable = 0 WHERE bbsID = ?"; 
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			pstmt.setInt(1,bbsID);
 			return pstmt.executeUpdate(); //성공한다면 0이상의 정수 값 반환
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return -1; // 데이터베이스 오류
		
	}
	
	public int alarmOff(String userID) {
		// available 상태를 보고 on/off를 한다.		
 		String SQL = "UPDATE user SET alramCondition = 0 WHERE userID = ?"; 
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			pstmt.setString(1,userID);
 			return pstmt.executeUpdate(); //성공한다면 0이상의 정수 값 반환
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return -1; // 데이터베이스 오류
		
	}
	
	public int alarmOn(String userID) {
		// available 상태를 보고 on/off를 한다.		
 		String SQL = "UPDATE user SET alramCondition = 1 WHERE userID = ?"; 
 		try {
 			PreparedStatement pstmt = conn.prepareStatement(SQL);
 			pstmt.setString(1,userID);
 			return pstmt.executeUpdate(); //성공한다면 0이상의 정수 값 반환
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		return -1; // 데이터베이스 오류
		
	}
	

}
