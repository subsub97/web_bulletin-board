package user;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class UserDAO {
	
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	public UserDAO() {
		try {
			String dbURL = "jdbc:mysql://localhost:3306/BBS";
			String dbID = "root";
			String dbPassword = "1234";
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(dbURL,dbID,dbPassword);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
		public int login(String userID, String userPassword) {
			String SQL = "SELECT userPassword FROM user WHERE userID = ?";
			try {
				pstmt = conn.prepareStatement(SQL);
				pstmt.setString(1, userID);
				rs = pstmt.executeQuery();
				if (rs.next()) {
					if(rs.getString(1).equals(userPassword)) 
						return 1; //로그인 성공
					else
						return 0; //비밀번호 불일치 
				}
				return -1; // 아이디가 없음
			} catch (Exception e) {
				e.printStackTrace();
			}
			return -2; // 데이터베이스 오류 
		
		}



public int join(User user) {
	String SQL = "insert into user values (?,?,?,?,?,0,0)";
	try {
		pstmt = conn.prepareStatement(SQL);
		pstmt.setString(1,user.getUserID());
		pstmt.setString(2,user.getUserPassword());
		pstmt.setString(3,user.getUserName());
		pstmt.setString(4,user.getUserGender());
		pstmt.setString(5,user.getUserEmail());
		return pstmt.executeUpdate(); //업데이트된 행의 수를 반환하는 메서드
	} catch(Exception e) {
		e.printStackTrace();
	}
	return -1;
	}

public boolean alarm(String userID) {
	System.out.println(userID);
	String SQL = "SELECT alarmPoint FROM user WHERE userId = ?";
	String SQL2 = "UPDATE user SET alramPoint = 0 WHERE alarmPoint = 1 and userID = ?";
	try {
		pstmt = conn.prepareStatement(SQL);
		PreparedStatement pstmt2 = conn.prepareStatement(SQL2);
		pstmt2 = conn.prepareStatement(SQL2);
		pstmt.setString(1,userID);
		pstmt2.setString(1,userID);
		rs = pstmt.executeQuery();
		pstmt2.executeUpdate();
		boolean hasResult = rs.next();
		System.out.println(hasResult);
		return  hasResult; //업데이트된 행의 수를 반환하는 메서드
	} catch(Exception e) {
		e.printStackTrace();
	}
	return false;
	}
}
